#include "monty.h"
#include <string.h>

int check_push_value(char *token, int line_number)
{
	if (token == NULL)
	{
		printf("here is big error \n");
		printf("line: %d\n", line_number);
		exit(EXIT_FAILURE);
	}
	else if (strcmp(token, "0") != 0)
	{
		if (!atoi(token))
		{
			printf("%s\n", token);
			printf("here is big error \n");
			printf("line: %d\n", line_number);
			exit(EXIT_FAILURE);
		}
		
	}
	return (1);
}

int _cmp(char *token)
{
	int i;

	for (i = 0; token[i] != '\0'; i++)
		token[i] = tolower(token[i]);
	if (strcmp(token, "pall") == 0)
		return (1);
	else if (strcmp(token, "swap") == 0)
		return (1);
	else if (strcmp(token, "pint") == 0)
		return (1);
	else if (strcmp(token, "nop") == 0)
		return (1);
	return (0);
}

void inst(char **instructions, char *token, int counter)
{
	void (*redirecting)(stack_t **stack, unsigned int line_number);
	stack_t *Stack;
	char lowered[BUFSIZ], *delim = " \n";
	int y, value = 0;

	while (token != NULL)
	{
		strcpy(lowered, token);
		for (y = 0; lowered[y] != '\0'; y++)
			lowered[y] = tolower(lowered[y]);
		if (strcmp(lowered, "push") == 0) /* case push */
		{
			//instructions[i] = malloc(sizeof(char) * strlen(token) + 1);
			//strcpy(instructions[i], token);
			//i++;
			token = strtok(NULL, delim);
			value = check_push_value(token, counter);
			if (value == 1)
			{
				//instructions[i] = malloc(sizeof(char) * strlen(token) + 1);
				//strcpy(instructions[i], token);
				//i++;
				if (SIZE == 0)
				{
					stack = create_stack();

				token = strtok(NULL, delim);
				continue;
			}
		} else if (_cmp(token))
		{
			//instructions[i] = malloc(sizeof(char) * strlen(token) + 1);
			//strcpy(instructions[i], token);
			//i++;
			token = strtok(NULL, delim);
			continue;
		}
		token = strtok(NULL, delim);
	}
	//return (i);
}

/**
  * main - Entry point
  *
  * Return: Always 0 (Success)
  */
char **read_file(char *file_name)
{
	FILE *f;
	char buffer[BUFSIZ], **instructions, *token, *delim = " \n";
	int y = 0, counter = 0;

	f = fopen(file_name, "r");
	if (f == NULL)
	{
		printf("Error: Can't open file %s\n", file_name);
		return (NULL);
	}
	//instructions = malloc(sizeof(char *) * BUFSIZ);
	//if (instructions == NULL)
	//	return (NULL);
	while (fgets(buffer, sizeof(buffer), f) != NULL)
	{
		counter++;
		token = strtok(buffer, delim);
		y = inst(token, counter);
	}
	//instructions[y] = NULL;
	//for (int x=0 ; instructions[x] != NULL ;x++)
	//	printf("%s\n", instructions[x]);
	fclose(f);
	return (instructions);
}
